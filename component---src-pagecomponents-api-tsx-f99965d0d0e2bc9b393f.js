(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"W9+o":function(e,t,s){"use strict";s.r(t),s.d(t,"ApiPage",(function(){return i}));var n=s("q1tI"),l=s.n(n),a=s("soUV"),o=s("ma3e"),r=s("he5r");var i=function(e){var t,s;function n(){return e.apply(this,arguments)||this}return s=e,(t=n).prototype=Object.create(s.prototype),t.prototype.constructor=t,t.__proto__=s,n.prototype.render=function(){return l.a.createElement(a.a,{header:{url:"/",type:"website",title:"Power Query Formatter | Beautify your PowerQuery code",description:"Report a bug for M Formatter"}},l.a.createElement("h1",null,l.a.createElement(o.g,{style:{position:"relative",top:".15em"}})," Api Documentation"),l.a.createElement("div",null,"The formatting service is hosted as an azure function. Initial use will probably take some time (due to the warming of the azure function) but subsequent usages should be much quicker. To use the api you need to send a ",l.a.createElement("b",null,"POST")," request to",l.a.createElement("b",null," ",r.a.formatterApiUrl," "),"with content type ",l.a.createElement("b",null,"application/json")," and the following body structure (typescript type declaration):",l.a.createElement("div",{dangerouslySetInnerHTML:{__html:'<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248) none repeat scroll 0% 0%;"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">type</span> RequestBody =\n{\n     code: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>,\n     config?: IConfig,   <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//optional, will use default config if not supplied</span>\n     resultType?: <span class="hljs-string" style="color: rgb(221, 17, 68);">"html"</span> | <span class="hljs-string" style="color: rgb(221, 17, 68);">"text"</span> <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//optional, default is "html". If set to "text", the resulting html will be converted to plaintext using html2plaintext.</span>\n}</pre>'}}),"A javascript usage example is provided in ",l.a.createElement("a",{href:"https://github.com/UliPlabst/powerquery-formatter-examples"},"our example repository."),l.a.createElement("br",null),l.a.createElement("div",null,"The config object is defined by",l.a.createElement("div",{dangerouslySetInnerHTML:{__html:'<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248) none repeat scroll 0% 0%;"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">export</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">interface</span> IConfig\n{\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//String that is used for indentation, default = "&amp;nbsp;&amp;nbsp;"</span>\n    indentation?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//Length of the indentation string (is used for determining when the max line width is reached)</span>\n    indentationLength?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">number</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//String that is used to terminate a line, default = "&lt;br/&gt;"</span>\n    lineEnd?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//String that is used as a whitespace, default = "&amp;nbsp;"</span>\n    ws?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//Maximum line width, default = 100. The formatter forces expression to break into several lines if the maximum line width would be reached. Please not some expressions cannot be broken into multiple lines such as very long identifiers and therefore the maximum line width can be exceeded in these cases. As of now there is no warning to give you info about that.</span>\n    lineWidth?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">number</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//Number of different bracket classes, default = 3. The formatter assigns bracket pairs the classes \'bracket\' and \'bracket-{num}\' where num = 1...{numBrackets}. You can then style your matching brackets with configurable depth.</span>\n    numBrackets?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">number</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//All text (code) is escaped into html format, default = true.</span>\n    escapeHtmlText?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">boolean</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//Align paired expressions by their equal sign, default = false.</span>\n    alignPairedExpressionsByEqual?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">boolean</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//If null the formatter will put classes onto the resulting html but not styles (can be used for websites where you want to style the formatted html with css yourself). If non null the classes will be translated to inline styles on the html elements. See below for more information about the used classes.</span>\n    inlineCss?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>;\n    <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//Toggle include comments</span>\n    includeComments?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">boolean</span>;\n}</pre>'}}))),l.a.createElement("div",null,"The css classes assigned by the formatter that can be used to customize the style either via the ",l.a.createElement("b",null,"inlineCss")," config option or via css on your webpage are"),l.a.createElement("ul",null,l.a.createElement("li",null,"comment"),l.a.createElement("li",null,"constant",l.a.createElement("ul",null,l.a.createElement("li",null,"keyword"),l.a.createElement("li",null,"identifier"),l.a.createElement("ul",null,l.a.createElement("li",null,"method-call")),l.a.createElement("li",null,"operator"),l.a.createElement("ul",null,l.a.createElement("li",null,"operator-dot"),l.a.createElement("li",null,"operator-keyword")),l.a.createElement("li",null,"bracket"),l.a.createElement("li",null,"bracket-","{","num","}"),l.a.createElement("li",null,"type"))),l.a.createElement("li",null,"literal",l.a.createElement("ul",null,l.a.createElement("li",null,"string"),l.a.createElement("li",null,"list"),l.a.createElement("li",null,"boolean"),l.a.createElement("li",null,"number"),l.a.createElement("li",null,"null"),l.a.createElement("li",null,"record"),l.a.createElement("li",null,"string")))),l.a.createElement("div",null,l.a.createElement("h3",null,"Response"),l.a.createElement("div",null,"You will receive a response with Status 200 on success or Status 400 if an error occurred. In both cases the response body is a json object of type",l.a.createElement("div",{dangerouslySetInnerHTML:{__html:'<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51, 51); background: rgb(248, 248, 248) none repeat scroll 0% 0%;"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">type</span> ResponseBody = {\n  result: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>, <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//HTML format result</span>\n  errors: FormatError[]\n}\n              \n<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">type</span> FormatError = {\n  kind: FormatErrorKind,\n  innerError?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">Error</span>,   <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//the inner exception if there was one</span>\n  meta?: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">any</span>,            <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//additional meta information,</span>\n  message: <span class="hljs-built_in" style="color: rgb(0, 134, 179);">string</span>\n}\n              \n<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">export</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">type</span> FormatErrorKind = \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//an unknown error occurred. If this happens look at the innerError and possibly report the bug</span>\n  <span class="hljs-string" style="color: rgb(221, 17, 68);">"UNKNOWN"</span>             \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//parsing was unsuccessfull. As we use the official ms parser the problem is most likely within your code</span>\n  | <span class="hljs-string" style="color: rgb(221, 17, 68);">"PARSER_ERROR"</span>      \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//formatting was unsuccessfull. This is a strong indication of a bug, consider writing a bug report if this happens</span>\n  | <span class="hljs-string" style="color: rgb(221, 17, 68);">"FORMATTER_ERROR"</span>   \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//the custom css that you provided is invalid</span>\n  | <span class="hljs-string" style="color: rgb(221, 17, 68);">"CSS_ERROR"</span>         \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//you provided an invalid config object</span>\n  | <span class="hljs-string" style="color: rgb(221, 17, 68);">"INVALID_CONFIG"</span>    \n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//the formatter encountered an unknown node kind in the AST. Please note that section documents are currently not supported.</span>\n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//If this happens for code without sections then we are missing a node kind implementation. There are probabably some that we are missing but since our test bench does not include any of them it is hard for me to track them down. </span>\n  <span class="hljs-comment" style="color: rgb(153, 153, 136); font-style: italic;">//If you provide your query (or at least the portion of it that causes the error) it would help me out.</span>\n  | <span class="hljs-string" style="color: rgb(221, 17, 68);">"UNKNOWN_ENTITY"</span>;  </pre>'}}))),l.a.createElement("h3",null,"Terms of use"),l.a.createElement("div",null,"You are free to use the api as long as you give credit and (if you use the formatter for your website) link back to this site."))},n}(l.a.Component);t.default=i},he5r:function(e,t,s){"use strict";s.d(t,"a",(function(){return n}));var n={formatterApiUrl:"https://m-formatter.azurewebsites.net/api/format/v1",appInsightsInstrumentationKey:"2c5f6d8d-1c89-4fee-8896-9e30ccff2f55"}}}]);
//# sourceMappingURL=component---src-pagecomponents-api-tsx-f99965d0d0e2bc9b393f.js.map